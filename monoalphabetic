#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26

// Function to perform monoalphabetic substitution encryption
void monoalphabeticSubstitutionEncrypt(char *plaintext, char *cipherKey) {
    int i;
    for (i = 0; i < strlen(plaintext); i++) {
        if (isalpha(plaintext[i])) {
            if (islower(plaintext[i])) {
                plaintext[i] = tolower(cipherKey[plaintext[i] - 'a']);
            } else {
                plaintext[i] = toupper(cipherKey[plaintext[i] - 'A']);
            }
        }
    }
}

int main() {
    char plaintext[1000], cipherKey[ALPHABET_SIZE + 1];
    int i;
    
    printf("Enter plaintext to encrypt: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    printf("Enter the substitution cipher key (26 letters without spaces): ");
    fgets(cipherKey, sizeof(cipherKey), stdin);

    // Remove trailing newline characters from fgets
    plaintext[strcspn(plaintext, "\n")] = '\0';
    cipherKey[strcspn(cipherKey, "\n")] = '\0';

    // Validate length of the cipher key
    if (strlen(cipherKey) != ALPHABET_SIZE) {
        printf("Cipher key must contain exactly 26 letters.\n");
        return 1;
    }

    // Validate uniqueness of letters in the cipher key
    int charCount[ALPHABET_SIZE] = {0};
    for (i = 0; i < ALPHABET_SIZE; i++) {
        if (!isalpha(cipherKey[i])) {
            printf("Cipher key must contain only alphabetic characters.\n");
            return 1;
        }
        if (islower(cipherKey[i])) {
            charCount[cipherKey[i] - 'a']++;
        } else {
            charCount[cipherKey[i] - 'A']++;
        }
        if (charCount[cipherKey[i] - 'a'] > 1 || charCount[cipherKey[i] - 'A'] > 1) {
            printf("Cipher key must contain each letter exactly once.\n");
            return 1;
        }
    }

    // Encrypt the plaintext
    monoalphabeticSubstitutionEncrypt(plaintext, cipherKey);

    printf("Encrypted text: %s\n", plaintext);

    return 0;
}
