#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5

// Function to prepare the key matrix
void prepareKeyMatrix(char key[], char keyMatrix[][SIZE]) {
    int i, j, k;
    char alphabets[26] = "ABCDEFGHIKLMNOPQRSTUVWXYZ"; // excluding 'J'

    // Initialize key matrix with zeros
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            keyMatrix[i][j] = 0;
        }
    }

    // Fill the key matrix with unique characters from the key
    for (i = 0, k = 0; i < strlen(key); i++) {
        if (key[i] == 'J') // 'J' and 'I' are treated the same in Playfair
            key[i] = 'I';

        // If the character is not already present in the key matrix, add it
        if (!isalpha(key[i]))
            continue;

        for (j = 0; j < 26; j++) {
            if (key[i] == alphabets[j]) {
                keyMatrix[k / SIZE][k % SIZE] = key[i];
                alphabets[j] = 0; // Mark as used
                k++;
                break;
            }
        }
    }

    // Fill the remaining cells of the key matrix with the remaining alphabets
    for (i = 0, j = 0; i < 26; i++) {
        if (alphabets[i] != 0) {
            keyMatrix[k / SIZE][k % SIZE] = alphabets[i];
            k++;
        }
    }
}

// Function to find the position of a character in the key matrix
void findPosition(char keyMatrix[][SIZE], char ch, int *row, int *col) {
    int i, j;

    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            if (keyMatrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}

// Function to encrypt a pair of characters using the key matrix
void encryptPair(char keyMatrix[][SIZE], char ch1, char ch2, char *cipher) {
    int row1, col1, row2, col2;

    findPosition(keyMatrix, ch1, &row1, &col1);
    findPosition(keyMatrix, ch2, &row2, &col2);

    // If the characters are in the same row, replace them with characters to their right (circular)
    if (row1 == row2) {
        cipher[0] = keyMatrix[row1][(col1 + 1) % SIZE];
        cipher[1] = keyMatrix[row2][(col2 + 1) % SIZE];
    }
    // If the characters are in the same column, replace them with characters below them (circular)
    else if (col1 == col2) {
        cipher[0] = keyMatrix[(row1 + 1) % SIZE][col1];
        cipher[1] = keyMatrix[(row2 + 1) % SIZE][col2];
    }
    // If the characters form a rectangle, replace them with characters forming a rectangle
    else {
        cipher[0] = keyMatrix[row1][col2];
        cipher[1] = keyMatrix[row2][col1];
    }
}

// Function to encrypt plaintext using the Playfair cipher algorithm
void playfairEncrypt(char keyMatrix[][SIZE], char plaintext[], char *ciphertext) {
    int i, j = 0;
    char ch1, ch2;

    for (i = 0; i < strlen(plaintext); i++) {
        if (isalpha(plaintext[i])) {
            if (plaintext[i] == 'J') // 'J' and 'I' are treated the same in Playfair
                plaintext[i] = 'I';

            if (i < strlen(plaintext) - 1 && isalpha(plaintext[i + 1]) && plaintext[i] == plaintext[i + 1]) {
                // If two consecutive characters are the same, insert an 'X' between them
                ch1 = plaintext[i];
                ch2 = 'X';
                i--; // To stay at the same character for next iteration
            } else {
                ch1 = plaintext[i];
                ch2 = plaintext[i + 1];
                i++; // Move to the next pair of characters
            }

            encryptPair(keyMatrix, ch1, ch2, &ciphertext[j]);
            j += 2;
        }
    }

    // Add null terminator to the end of the ciphertext
    ciphertext[j] = '\0';
}

int main() {
    char key[SIZE * SIZE], plaintext[1000], ciphertext[1000];
    char keyMatrix[SIZE][SIZE];
    
    printf("Enter the key (no 'J', 25 characters): ");
    scanf("%s", key);
    printf("Enter plaintext to encrypt: ");
    scanf("%s", plaintext);

    prepareKeyMatrix(key, keyMatrix);
    playfairEncrypt(keyMatrix, plaintext, ciphertext);

    printf("Encrypted text: %s\n", ciphertext);

    return 0;
}
